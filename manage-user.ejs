<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage User</title>
  <link rel="stylesheet" href="/css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap');

    * {
      box-sizing: border-box;
    }

    body {
      min-height: 100vh;
      margin: 0;
      padding: 0;
      font-family: 'Inter', sans-serif;
    }

    .admin-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      margin-top: 120px;
    }

    .page-header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 0.5rem;
    }

    .page-subtitle {
      color: #ffffff;
      font-size: 1.1rem;
      margin: 0;
    }

    .stats-bar {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .stat-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 2rem 1.5rem;
      border-radius: 16px;
      box-shadow: 0 8px 25px -8px rgba(102, 126, 234, 0.4);
      border: 1px solid rgba(255, 255, 255, 0.1);
      text-align: center;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .stat-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      z-index: 1;
    }

    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px -8px rgba(102, 126, 234, 0.6);
    }

    .stat-card > * {
      position: relative;
      z-index: 2;
    }

    .stat-icon {
      width: 60px;
      height: 60px;
      margin: 0 auto 1rem;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: #ffffff;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stat-label {
      color: rgba(255, 255, 255, 0.9);
      font-size: 1rem;
      font-weight: 500;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .search-box {
      margin-bottom: 1.5rem;
      max-width: 400px;
    }

    .search-input {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 1rem;
      background: white;
    }

    .search-input:focus {
      outline: none;
      border-color: #3b82f6;
    }

    .users-table-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      overflow: hidden;
    }

    .table-header {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      color: white;
      padding: 1.5rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .table-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0;
    }

    .save-all-btn {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }

    .save-all-btn:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .bulk-actions {
      display: flex;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1rem;
      padding: 1rem;
      background: #f8fafc;
      border-radius: 8px;
      border: 1px solid #e2e8f0;
      flex-wrap: wrap;
    }

    .select-all {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .table-wrapper {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    .users-table {
      width: 100%;
      border-collapse: collapse;
      min-width: 800px;
    }

    .users-table thead {
      background: #f8fafc;
    }

    .users-table th {
      padding: 1rem 1.5rem;
      text-align: left;
      font-weight: 600;
      font-size: 0.875rem;
      color: #475569;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      border-bottom: 1px solid #e2e8f0;
      white-space: nowrap;
    }

    .users-table td {
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #f1f5f9;
      vertical-align: middle;
    }

    .users-table tbody tr:hover {
      background: #f8fafc;
    }

    .user-info {
      display: flex;
      align-items: center;
      gap: 1rem;
      min-width: 200px;
    }

    .user-avatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 2px solid #e2e8f0;
      flex-shrink: 0;
    }

    .user-details h4 {
      margin: 0;
      font-size: 1rem;
      font-weight: 600;
      color: #1e293b;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 150px;
    }

    .user-details p {
      margin: 0;
      font-size: 0.875rem;
      color: #64748b;
      white-space: nowrap;
    }

    .edit-input {
      width: 100%;
      padding: 0.5rem 0.75rem;
      border: 2px solid #e5e7eb;
      border-radius: 6px;
      font-size: 0.875rem;
      transition: all 0.2s ease;
      min-width: 100px;
    }

    .edit-input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .edit-input.displayName {
      min-width: 150px;
    }

    .edit-input.balance {
      min-width: 120px;
      text-align: right;
    }

    .steam-id {
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.75rem;
      color: #64748b;
      background: #f1f5f9;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      white-space: nowrap;
    }

    .action-buttons {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .btn-sm {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 6px;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      white-space: nowrap;
    }

    .btn-primary {
      background: #3b82f6;
      color: white;
    }

    .btn-primary:hover {
      background: #2563eb;
      transform: translateY(-1px);
    }

    .btn-danger {
      background: #ef4444;
      color: white;
    }

    .btn-danger:hover {
      background: #dc2626;
      transform: translateY(-1px);
    }

    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      white-space: nowrap;
    }

    .status-offline {
      background: #fee2e2;
      color: #991b1b;
    }

    /* Mobile Cards Layout */
    .mobile-cards {
      display: none;
    }

    .user-card {
      background: white;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1);
    }

    .user-card-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .user-card-avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      border: 2px solid #e2e8f0;
    }

    .user-card-info h4 {
      margin: 0 0 0.25rem 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: #1e293b;
    }

    .user-card-info p {
      margin: 0;
      font-size: 0.875rem;
      color: #64748b;
    }

    .user-card-fields {
      display: grid;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .field-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .field-label {
      font-size: 0.875rem;
      font-weight: 600;
      color: #374151;
    }

    .user-card-actions {
      display: flex;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    .user-card-select {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    /* Responsive Breakpoints */
    @media (max-width: 1200px) {
      .stats-bar {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
      }
      
      .stat-card {
        padding: 1.5rem 1rem;
      }
      
      .stat-number {
        font-size: 2rem;
      }
      
      .stat-icon {
        width: 50px;
        height: 50px;
        font-size: 1.25rem;
      }

      .users-table th,
      .users-table td {
        padding: 0.75rem 1rem;
      }
    }

    @media (max-width: 1024px) {
      .admin-container {
        padding: 1rem;
        margin-top: 80px;
      }

      .stats-bar {
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      }

      .table-header {
        padding: 1rem 1.5rem;
      }

      .users-table th:nth-child(3),
      .users-table td:nth-child(3) {
        display: none;
      }
    }

    @media (max-width: 768px) {
      .page-title {
        font-size: 2rem;
      }

      .page-subtitle {
        font-size: 1rem;
      }

      .stats-bar {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      .stat-card {
        padding: 1.5rem;
      }

      .table-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
        padding: 1rem;
      }

      .bulk-actions {
        flex-direction: column;
        align-items: stretch;
        gap: 0.75rem;
      }

      .search-box {
        max-width: none;
      }

      /* Hide table and show mobile cards */
      .table-wrapper {
        display: none;
      }

      .mobile-cards {
        display: block;
      }

      .users-table-container {
        background: transparent;
        box-shadow: none;
        border: none;
      }
    }

    @media (max-width: 640px) {
      .admin-container {
        padding: 0.75rem;
        margin-top: 70px;
      }

      .page-header {
        margin-bottom: 1.5rem;
      }

      .page-title {
        font-size: 1.75rem;
      }

      .stats-bar {
        gap: 0.75rem;
      }
      
      .stat-card {
        padding: 1.25rem;
      }
      
      .stat-number {
        font-size: 1.75rem;
      }
      
      .stat-label {
        font-size: 0.875rem;
      }
      
      .stat-icon {
        width: 45px;
        height: 45px;
        font-size: 1rem;
      }

      .user-card {
        padding: 1rem;
      }

      .user-card-header {
        flex-direction: column;
        text-align: center;
        gap: 0.75rem;
      }

      .user-card-avatar {
        width: 50px;
        height: 50px;
      }

      .user-card-actions {
        justify-content: center;
      }

      .table-header {
        padding: 0.75rem;
      }

      .table-title {
        font-size: 1.1rem;
      }

      .save-all-btn {
        padding: 0.6rem 1rem;
        font-size: 0.875rem;
      }
    }

    @media (max-width: 480px) {
      .admin-container {
        padding: 0.5rem;
        margin-top: 60px;
      }

      .page-title {
        font-size: 1.5rem;
      }

      .page-subtitle {
        font-size: 0.9rem;
      }

      .user-card {
        padding: 0.75rem;
      }

      .user-card-fields {
        gap: 0.75rem;
      }

      .btn-sm {
        padding: 0.4rem 0.75rem;
        font-size: 0.8rem;
      }

      .user-card-actions {
        gap: 0.5rem;
      }

      .search-input {
        padding: 0.6rem 0.8rem;
        font-size: 0.9rem;
      }
    }

    /* Landscape orientation adjustments */
    @media (max-width: 896px) and (orientation: landscape) {
      .admin-container {
        margin-top: 60px;
      }

      .page-header {
        margin-bottom: 1rem;
      }

      .stats-bar {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }

      .stat-card {
        padding: 1rem;
      }

      .stat-number {
        font-size: 1.5rem;
      }

      .stat-icon {
        width: 40px;
        height: 40px;
        font-size: 0.875rem;
      }
    }

    /* Ultra-wide screens */
    @media (min-width: 1920px) {
      .admin-container {
        max-width: 1600px;
        padding: 3rem;
      }

      .stats-bar {
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      }
    }

    /* Print styles */
    @media print {
      .save-all-btn,
      .action-buttons,
      .bulk-actions {
        display: none;
      }

      .users-table-container {
        box-shadow: none;
        border: 1px solid #000;
      }

      .stat-card {
        background: white;
        border: 1px solid #000;
        color: black;
      }

      .page-title,
      .page-subtitle {
        color: black;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="admin-container">
    <div class="page-header">
      <h1 class="page-title">Manage all users</h1>
      <p class="page-subtitle">Edit information and manage all user accounts.</p>
    </div>

    <div class="stats-bar">
      <div class="stat-card">
        <div class="stat-icon">👥</div>
        <div class="stat-number users"><%= users.length %></div>
        <div class="stat-label">All users</div>
      </div>
    </div>

    <div class="search-box">
      <input type="text" class="search-input" placeholder="🔍 Search users (Name, Steam ID)" id="userSearch">
    </div>

    <form id="bulkUpdateForm" method="POST" action="/admin/users/bulk-update">
      <div class="users-table-container">
        <div class="table-header">
          <h3 class="table-title">List of all users</h3>
          <button type="button" class="save-all-btn" onclick="bulkSave()">💾 Save all changes</button>
        </div>

        <div class="bulk-actions">
          <div class="select-all">
            <input type="checkbox" id="selectAll">
            <label for="selectAll">Select all</label>
          </div>
          <button type="button" class="btn-sm btn-danger" onclick="deleteSelected()">🗑️ Delete selected</button>
        </div>

        <!-- Desktop Table View -->
        <div class="table-wrapper">
          <table class="users-table">
            <thead>
              <tr>
                <th>Select</th>
                <th>User information</th>
                <th>Steam ID</th>
                <th>Name</th>
                <th>Balance (Baht)</th>
                <th>Management</th>
              </tr>
            </thead>
            <tbody id="usersTableBody">
              <% if (users && users.length > 0) { %>
                <% users.forEach((user, index) => { %>
                  <tr data-user-id="<%= user._id %>">
                    <td><input type="checkbox" class="user-select" name="selectedUsers[]" value="<%= user._id %>"></td>
                    <td>
                      <div class="user-info">
                        <img src="<%= user.avatar %>" alt="avatar" class="user-avatar">
                        <div class="user-details">
                          <h4><%= user.displayName %></h4>
                          <p>เข้าร่วมเมื่อ: <%= new Date(user.createdAt).toLocaleDateString('th-TH') %></p>
                        </div>
                      </div>
                    </td>
                    <td><span class="steam-id"><%= user.steamId %></span></td>
                    <td>
                      <input type="text" name="displayName_<%= user._id %>" value="<%= user.displayName %>" class="edit-input displayName" data-original="<%= user.displayName %>">
                    </td>
                    <td>
                      <input type="number" step="0.01" name="balance_<%= user._id %>" value="<%= user.balance %>" class="edit-input balance" data-original="<%= user.balance %>">
                    </td>
                    <td>
                      <div class="action-buttons">
                        <button type="button" class="btn-sm btn-primary" onclick="saveUser('<%= user._id %>')">💾</button>
                        <button type="button" class="btn-sm btn-danger" onclick="deleteUser('<%= user._id %>')">🗑️</button>
                      </div>
                    </td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="7" style="text-align: center; padding: 2rem; color: #64748b;">
                    ไม่พบข้อมูลผู้ใช้
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Mobile Cards View -->
        <div class="mobile-cards" id="mobileCards">
          <% if (users && users.length > 0) { %>
            <% users.forEach((user, index) => { %>
              <div class="user-card" data-user-id="<%= user._id %>">
                <div class="user-card-select">
                  <input type="checkbox" class="user-select" name="selectedUsers[]" value="<%= user._id %>">
                  <label>เลือกรายการนี้</label>
                </div>
                
                <div class="user-card-header">
                  <img src="<%= user.avatar %>" alt="avatar" class="user-card-avatar">
                  <div class="user-card-info">
                    <h4><%= user.displayName %></h4>
                    <p>เข้าร่วมเมื่อ: <%= new Date(user.createdAt).toLocaleDateString('th-TH') %></p>
                  </div>
                </div>

                <div class="user-card-fields">
                  <div class="field-group">
                    <label class="field-label">Steam ID</label>
                    <span class="steam-id"><%= user.steamId %></span>
                  </div>
                  
                  <div class="field-group">
                    <label class="field-label">ชื่อผู้ใช้</label>
                    <input type="text" name="displayName_<%= user._id %>" value="<%= user.displayName %>" class="edit-input" data-original="<%= user.displayName %>">
                  </div>
                  
                  <div class="field-group">
                    <label class="field-label">ยอดเงิน (บาท)</label>
                    <input type="number" step="0.01" name="balance_<%= user._id %>" value="<%= user.balance %>" class="edit-input" data-original="<%= user.balance %>">
                  </div>
                </div>

                <div class="user-card-actions">
                  <button type="button" class="btn-sm btn-primary" onclick="saveUser('<%= user._id %>')">💾 บันทึก</button>
                  <button type="button" class="btn-sm btn-danger" onclick="deleteUser('<%= user._id %>')">🗑️ ลบ</button>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <div style="text-align: center; padding: 2rem; color: #64748b;">
              ไม่พบข้อมูลผู้ใช้
            </div>
          <% } %>
        </div>
      </div>
    </form>
  </div>

  <%- include('partials/footer') %>

  <script>
    // Search functionality
    document.getElementById('userSearch').addEventListener('input', function(e) {
      const searchTerm = e.target.value.toLowerCase();
      const tableRows = document.querySelectorAll('#usersTableBody tr');
      const cards = document.querySelectorAll('.user-card');
      
      // Search in table
      tableRows.forEach(row => {
        const userName = row.querySelector('.user-details h4')?.textContent.toLowerCase() || '';
        const steamId = row.querySelector('.steam-id')?.textContent.toLowerCase() || '';
        
        if (userName.includes(searchTerm) || steamId.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });

      // Search in cards
      cards.forEach(card => {
        const userName = card.querySelector('.user-card-info h4')?.textContent.toLowerCase() || '';
        const steamId = card.querySelector('.steam-id')?.textContent.toLowerCase() || '';
        
        if (userName.includes(searchTerm) || steamId.includes(searchTerm)) {
          card.style.display = '';
        } else {
          card.style.display = 'none';
        }
      });
    });

    // Select all checkbox
    document.getElementById('selectAll').addEventListener('change', function(e) {
      const checkboxes = document.querySelectorAll('.user-select');
      checkboxes.forEach(checkbox => {
        checkbox.checked = e.target.checked;
      });
    });

    // Individual user save
    function saveUser(userId) {
      const displayName = document.querySelector(`input[name="displayName_${userId}"]`).value;
      const balance = document.querySelector(`input[name="balance_${userId}"]`).value;
      
      // แสดง loading
      Swal.fire({
        title: 'Saving...',
        text: 'Please wait..',
        allowOutsideClick: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      fetch(`/admin/user/${userId}/update`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          displayName: displayName,
          balance: parseFloat(balance)
        })
      })
      .then(response => {
        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'User information saved successfully.',
            showConfirmButton: false,
            timer: 1500
          });
          
          // อัปเดต data-original หลังบันทึกสำเร็จ
          document.querySelectorAll(`input[name="displayName_${userId}"]`).forEach(input => {
            input.dataset.original = displayName;
            input.style.borderColor = '#e5e7eb';
            input.style.backgroundColor = 'white';
          });
          document.querySelectorAll(`input[name="balance_${userId}"]`).forEach(input => {
            input.dataset.original = balance;
            input.style.borderColor = '#e5e7eb';
            input.style.backgroundColor = 'white';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'An error occurred!',
            text: 'Failed to save data.',
            confirmButtonText: 'OK'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'An error occurred!',
          text: 'Cannot connect to the server.',
          confirmButtonText: 'OK'
        });
      });
    }

    // Delete user
    function deleteUser(userId) {
      Swal.fire({
        title: 'Confirm deletion',
        text: 'Are you sure you want to delete this user? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6b7280',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          // แสดง loading
          Swal.fire({
            title: 'Deleting...',
            text: 'Please wait..',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          fetch(`/admin/user/${userId}/delete`, {
            method: 'DELETE'
          })
          .then(response => {
            if (response.ok) {
              // Remove from both table and mobile cards
              const tableRow = document.querySelector(`tr[data-user-id="${userId}"]`);
              const card = document.querySelector(`.user-card[data-user-id="${userId}"]`);
              
              if (tableRow) tableRow.remove();
              if (card) card.remove();
              
              Swal.fire({
                icon: 'success',
                title: 'Deletion successful!',
                text: 'User deleted successfully.',
                showConfirmButton: false,
                timer: 1500
              });

              // Update user count
              const currentCount = parseInt(document.querySelector('.stat-number.users').textContent);
              document.querySelector('.stat-number.users').textContent = currentCount - 1;
            } else {
              Swal.fire({
                icon: 'error',
                title: 'An error occurred!',
                text: 'Unable to delete user.',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'An error occurred!',
              text: 'Cannot connect to the server.',
              confirmButtonText: 'OK'
            });
          });
        }
      });
    }

    // Delete selected users
    function deleteSelected() {
      const selected = document.querySelectorAll('.user-select:checked');
      if (selected.length === 0) {
        Swal.fire({
          icon: 'warning',
          title: 'No items selected.',
          text: 'Please select the user(s) to delete.',
          confirmButtonText: 'OK'
        });
        return;
      }
      
      Swal.fire({
        title: 'Confirm deletion of multiple items.',
        text: `Are you sure you want to delete ${selected.length} user(s)? This action cannot be undone.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6b7280',
        confirmButtonText: `Delete ${selected.length} users`,
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          const userIds = Array.from(selected).map(cb => cb.value);
          
          // แสดง loading
          Swal.fire({
            title: 'Deleting...',
            text: `Deleting ${selected.length} users...`,
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          fetch('/admin/users/bulk-delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userIds })
          })
          .then(response => {
            if (response.ok) {
              userIds.forEach(userId => {
                const tableRow = document.querySelector(`tr[data-user-id="${userId}"]`);
                const card = document.querySelector(`.user-card[data-user-id="${userId}"]`);
                
                if (tableRow) tableRow.remove();
                if (card) card.remove();
              });
              
              Swal.fire({
                icon: 'success',
                title: 'Deletion successful!',
                text: `Successfully deleted ${userIds.length} users.`,
                showConfirmButton: false,
                timer: 2000
              });
              
              // รีเซ็ต select all checkbox
              document.getElementById('selectAll').checked = false;

              // Update user count
              const currentCount = parseInt(document.querySelector('.stat-number.users').textContent);
              document.querySelector('.stat-number.users').textContent = currentCount - userIds.length;
            } else {
              Swal.fire({
                icon: 'error',
                title: 'An error occurred!',
                text: 'Unable to delete user.',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'An error occurred!',
              text: 'Cannot connect to the server.',
              confirmButtonText: 'OK'
            });
          });
        }
      });
    }

    // Bulk save function
    function bulkSave() {
      const changedInputs = document.querySelectorAll('.edit-input');
      const changes = [];
      
      changedInputs.forEach(input => {
        if (input.value !== input.dataset.original) {
          const userId = input.name.split('_')[1];
          const field = input.name.split('_')[0];
          
          let existingChange = changes.find(c => c.userId === userId);
          if (!existingChange) {
            existingChange = { userId: userId };
            changes.push(existingChange);
          }
          
          existingChange[field] = input.value;
        }
      });
      
      if (changes.length === 0) {
        Swal.fire({
          icon: 'info',
          title: 'No changes.',
          text: 'No edited data found.',
          confirmButtonText: 'OK'
        });
        return;
      }
      
      Swal.fire({
        title: 'Confirm save',
        text: `Found ${changes.length} changes. Do you want to save them?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#10b981',
        cancelButtonColor: '#6b7280',
        confirmButtonText: 'Save all',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          // แสดง loading
          Swal.fire({
            title: 'Saving...',
            text: `Saving ${changes.length} changes...`,
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });
          
          fetch('/admin/users/bulk-update', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ changes })
          })
          .then(response => {
            if (response.ok) {
              // อัปเดต data-original และรีเซ็ตสี
              changes.forEach(change => {
                if (change.displayName) {
                  const inputs = document.querySelectorAll(`input[name="displayName_${change.userId}"]`);
                  inputs.forEach(input => {
                    input.dataset.original = change.displayName;
                    input.style.borderColor = '#e5e7eb';
                    input.style.backgroundColor = 'white';
                  });
                }
                if (change.balance) {
                  const inputs = document.querySelectorAll(`input[name="balance_${change.userId}"]`);
                  inputs.forEach(input => {
                    input.dataset.original = change.balance;
                    input.style.borderColor = '#e5e7eb';
                    input.style.backgroundColor = 'white';
                  });
                }
              });
              
              Swal.fire({
                icon: 'success',
                title: 'Save successful!',
                text: `Successfully saved ${changes.length} changes.`,
                showConfirmButton: false,
                timer: 2000
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'An error occurred!',
                text: 'Unable to save changes.',
                confirmButtonText: 'OK'
              });
            }
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'An error occurred!',
              text: 'Cannot connect to the server.',
              confirmButtonText: 'OK'
            });
          });
        }
      });
    }

    // Highlight changed inputs
    document.querySelectorAll('.edit-input').forEach(input => {
      input.addEventListener('input', function() {
        if (this.value !== this.dataset.original) {
          this.style.borderColor = '#f59e0b';
          this.style.backgroundColor = '#fffbeb';
        } else {
          this.style.borderColor = '#e5e7eb';
          this.style.backgroundColor = 'white';
        }
      });
    });

    // Initialize additional functionality
    document.addEventListener('DOMContentLoaded', function() {
      console.log('User Management System initialized');
      
      // Add keyboard shortcuts
      document.addEventListener('keydown', function(e) {
        // Ctrl + S to save all
        if (e.ctrlKey && e.key === 's') {
          e.preventDefault();
          bulkSave();
        }
        
        // Ctrl + A to select all users
        if (e.ctrlKey && e.key === 'a' && e.target.tagName !== 'INPUT') {
          e.preventDefault();
          document.getElementById('selectAll').checked = true;
          document.getElementById('selectAll').dispatchEvent(new Event('change'));
        }
        
        // ESC to clear search
        if (e.key === 'Escape' && document.activeElement.id === 'userSearch') {
          document.getElementById('userSearch').value = '';
          document.getElementById('userSearch').dispatchEvent(new Event('input'));
        }
      });

      // Auto-check for unsaved changes before page unload
      window.addEventListener('beforeunload', function(e) {
        const changedInputs = document.querySelectorAll('.edit-input');
        let hasChanges = false;
        
        changedInputs.forEach(input => {
          if (input.value !== input.dataset.original) {
            hasChanges = true;
          }
        });
        
        if (hasChanges) {
          e.preventDefault();
          e.returnValue = 'You have unsaved changes. Do you want to leave this page?';
          return e.returnValue;
        }
      });

      // Add tooltips for action buttons
      document.querySelectorAll('.btn-sm').forEach(btn => {
        if (btn.textContent.includes('💾')) {
          btn.title = 'Save this user’s information.';
        } else if (btn.textContent.includes('🗑️')) {
          btn.title = 'Delete this user.';
        }
      });

      // Show/hide bulk actions based on selection
      function updateBulkActionsVisibility() {
        const selected = document.querySelectorAll('.user-select:checked');
        const bulkActions = document.querySelector('.bulk-actions');
        
        if (selected.length > 0) {
          bulkActions.style.opacity = '1';
          bulkActions.style.pointerEvents = 'auto';
        } else {
          bulkActions.style.opacity = '0.7';
          bulkActions.style.pointerEvents = 'none';
        }
      }

      // Listen for checkbox changes
      document.addEventListener('change', function(e) {
        if (e.target.classList.contains('user-select') || e.target.id === 'selectAll') {
          updateBulkActionsVisibility();
        }
      });

      // Initial check
      updateBulkActionsVisibility();
    });
  </script>
</body>
</html>